import os
import openai
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from fastapi import FastAPI, Request
from telegram.ext import Dispatcher
from telegram import Bot
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://–Ω–∞–∑–≤–∞–Ω–∏–µ.onrender.com/webhook

openai.api_key = OPENAI_KEY

# Telegram Bot
bot = Bot(token=BOT_TOKEN)
application = ApplicationBuilder().token(BOT_TOKEN).build()
dp: Dispatcher = application

# –ü–∞–º—è—Ç—å
user_contexts = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup([
    ["üìú –ò—Å—Ç–æ—Ä–∏—è", "üòÇ –ê–Ω–µ–∫–¥–æ—Ç"],
    ["üéÆ –ò–≥—Ä—ã", "üß† –ö—Ç–æ —è?"],
    ["üß© –§–∞–∫—Ç", "üíå –ü–æ–¥–ø–∏—Å–∫–∞"]
], resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_contexts[user.id] = []
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üß† –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. –ü–∏—à–∏ –º–Ω–µ ‚Äî –∏ –ø–æ–≥–æ–≤–æ—Ä–∏–º!",
        reply_markup=main_keyboard
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    if user.id not in user_contexts:
        user_contexts[user.id] = []

    user_contexts[user.id].append({"role": "user", "content": text})
    user_contexts[user.id] = user_contexts[user.id][-10:]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å —Ä–∞–∑–≥–æ–≤–æ—Ä, —à—É—Ç–∏—à—å, –ø–æ–º–æ–≥–∞–µ—à—å, –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–¥—Ä–æ—Å—Ç–∫–∞–º–∏."},
                *user_contexts[user.id]
            ],
            temperature=0.8
        )
        reply = response.choices[0].message["content"]
    except Exception as e:
        print("–û—à–∏–±–∫–∞ OpenAI:", e)
        reply = "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."

    user_contexts[user.id].append({"role": "assistant", "content": reply})
    await update.message.reply_text(reply)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


# FastAPI endpoint –¥–ª—è Telegram webhook
@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot)
    await application.update_queue.put(update)
    return {"ok": True}


# –ó–∞–ø—É—Å–∫ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@app.on_event("startup")
async def startup():
    await bot.delete_webhook()
    await bot.set_webhook(url=WEBHOOK_URL)
    print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:", WEBHOOK_URL)