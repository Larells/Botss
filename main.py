import os
import openai
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ü–∞–º—è—Ç—å (–≤ –û–ó–£)
user_contexts = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup([
    ["üìú –ò—Å—Ç–æ—Ä–∏—è", "üòÇ –ê–Ω–µ–∫–¥–æ—Ç"],
    ["üéÆ –ò–≥—Ä—ã", "üß† –ö—Ç–æ —è?"],
    ["üß© –§–∞–∫—Ç", "üíå –ü–æ–¥–ø–∏—Å–∫–∞"]
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_contexts[user.id] = []
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üß† –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. –ü–∏—à–∏ –º–Ω–µ ‚Äî –∏ –ø–æ–≥–æ–≤–æ—Ä–∏–º!",
        reply_markup=main_keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    if user.id not in user_contexts:
        user_contexts[user.id] = []

    user_contexts[user.id].append({"role": "user", "content": text})
    user_contexts[user.id] = user_contexts[user.id][-10:]  # –æ–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-4
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å —Ä–∞–∑–≥–æ–≤–æ—Ä, —à—É—Ç–∏—à—å, –ø–æ–º–æ–≥–∞–µ—à—å, –æ–±—â–∞–µ—à—å—Å—è —Å –ø–æ–¥—Ä–æ—Å—Ç–∫–∞–º–∏."},
                *user_contexts[user.id]
            ],
            temperature=0.8
        )
        reply = response.choices[0].message["content"]
except Exception as e:
    print("–û—à–∏–±–∫–∞ OpenAI:", e)
    reply = "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–∏—á–∏–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏."

    user_contexts[user.id].append({"role": "assistant", "content": reply})
    await update.message.reply_text(reply)

def main():
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()